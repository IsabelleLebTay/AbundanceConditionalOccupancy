// Code generated by stanc v2.32.1
#include <stan/model/model_header.hpp>
namespace abundance_cond_uccpuancy_TEST_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 97> locations_array__ =
  {" (found before start of program)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 39, column 2 to column 14)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 40, column 2 to column 21)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 41, column 2 to column 22)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 42, column 2 to column 28)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 43, column 2 to column 30)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 44, column 2 to column 25)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 47, column 2 to column 15)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 48, column 2 to column 15)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 49, column 2 to column 15)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 52, column 2 to column 15)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 53, column 2 to column 18)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 54, column 2 to column 17)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 55, column 2 to column 28)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 56, column 2 to column 30)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 57, column 2 to column 25)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 228, column 2 to column 20)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 229, column 2 to column 21)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 230, column 2 to column 23)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 234, column 4 to line 239, column 66)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 240, column 4 to column 47)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 243, column 4 to column 79)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 244, column 4 to column 41)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 248, column 6 to column 98)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 249, column 6 to column 43)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 246, column 19 to line 250, column 5)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 246, column 4 to line 250, column 5)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 232, column 17 to line 251, column 3)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 232, column 2 to line 251, column 3)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 65, column 4 to line 70, column 66)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 73, column 4 to column 47)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 76, column 4 to line 78, column 52)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 81, column 4 to column 41)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 84, column 4 to column 63)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 88, column 6 to column 98)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 91, column 6 to column 42)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 94, column 6 to column 50)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 97, column 6 to column 53)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 100, column 6 to column 63)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 104, column 2 to column 24)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 105, column 2 to column 31)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 106, column 2 to column 32)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 107, column 2 to column 38)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 108, column 2 to column 40)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 109, column 2 to column 35)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 112, column 2 to column 25)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 113, column 2 to column 28)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 114, column 2 to column 27)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 117, column 2 to column 25)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 118, column 2 to column 25)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 119, column 2 to column 25)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 120, column 2 to column 34)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 121, column 2 to column 36)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 122, column 2 to column 38)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 86, column 19 to line 123, column 5)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 86, column 4 to line 123, column 5)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 63, column 17 to line 124, column 3)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 63, column 2 to line 124, column 3)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 2, column 2 to column 17)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 3, column 2 to column 17)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 4, column 8 to column 9)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 4, column 11 to column 12)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 4, column 2 to column 14)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 5, column 17 to column 18)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 5, column 2 to column 20)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 9, column 9 to column 10)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 9, column 2 to column 21)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 10, column 9 to column 10)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 10, column 2 to column 22)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 11, column 9 to column 10)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 11, column 2 to column 28)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 12, column 9 to column 10)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 12, column 2 to column 30)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 13, column 9 to column 10)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 13, column 2 to column 25)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 14, column 9 to column 10)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 14, column 2 to column 17)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 15, column 9 to column 10)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 15, column 2 to column 16)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 18, column 11 to column 12)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 18, column 14 to column 15)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 18, column 4 to column 29)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 19, column 11 to column 12)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 19, column 14 to column 15)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 19, column 4 to column 29)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 23, column 26 to column 27)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 23, column 29 to column 30)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 23, column 2 to column 32)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 31, column 6 to column 30)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 30, column 19 to line 32, column 5)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 30, column 4 to line 32, column 5)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 26, column 17 to line 33, column 3)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 26, column 2 to line 33, column 3)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 228, column 9 to column 10)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 229, column 9 to column 10)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 229, column 12 to column 13)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_cond_uccpuancy_TEST.stan', line 230, column 9 to column 10)"};
class abundance_cond_uccpuancy_TEST_model final : public model_base_crtp<abundance_cond_uccpuancy_TEST_model> {
 private:
  int I;
  int J;
  std::vector<std::vector<int>> N;
  std::vector<int> M;
  Eigen::Matrix<double,-1,1> latitude_data__;
  Eigen::Matrix<double,-1,1> longitude_data__;
  Eigen::Matrix<double,-1,1> percent_conifer_data__;
  Eigen::Matrix<double,-1,1> percent_deciduous_data__;
  Eigen::Matrix<double,-1,1> percent_pine_data__;
  Eigen::Matrix<double,-1,1> size_data__;
  Eigen::Matrix<double,-1,1> age_data__;
  Eigen::Matrix<double,-1,-1> time_of_day_data__;
  Eigen::Matrix<double,-1,-1> Julian_date_data__;
  std::vector<std::vector<int>> y;
  Eigen::Map<Eigen::Matrix<double,-1,1>> latitude{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> longitude{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> percent_conifer{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> percent_deciduous{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> percent_pine{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> size{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> age{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> time_of_day{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Julian_date{nullptr, 0, 0};
 public:
  ~abundance_cond_uccpuancy_TEST_model() {}
  abundance_cond_uccpuancy_TEST_model(stan::io::var_context& context__,
                                      unsigned int random_seed__ = 0,
                                      std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "abundance_cond_uccpuancy_TEST_model_namespace::abundance_cond_uccpuancy_TEST_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 58;
      context__.validate_dims("data initialization", "I", "int",
        std::vector<size_t>{});
      I = std::numeric_limits<int>::min();
      current_statement__ = 58;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "I", I, 0);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 59;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 59;
      stan::math::check_greater_or_equal(function__, "J", J, 0);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("N", "I", I);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("N", "J", J);
      current_statement__ = 62;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{static_cast<size_t>(I), static_cast<size_t>(J)});
      N = std::vector<std::vector<int>>(I,
            std::vector<int>(J, std::numeric_limits<int>::min()));
      {
        std::vector<int> N_flat__;
        current_statement__ = 62;
        N_flat__ = context__.vals_i("N");
        current_statement__ = 62;
        pos__ = 1;
        current_statement__ = 62;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 62;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 62;
            stan::model::assign(N, N_flat__[(pos__ - 1)],
              "assigning variable N", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 62;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 63;
      stan::math::validate_non_negative_index("M", "I", I);
      current_statement__ = 64;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{static_cast<size_t>(I)});
      M = std::vector<int>(I, std::numeric_limits<int>::min());
      current_statement__ = 64;
      M = context__.vals_i("M");
      current_statement__ = 64;
      stan::math::check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("latitude", "I", I);
      current_statement__ = 66;
      context__.validate_dims("data initialization", "latitude", "double",
        std::vector<size_t>{static_cast<size_t>(I)});
      latitude_data__ = Eigen::Matrix<double,-1,1>::Constant(I,
                          std::numeric_limits<double>::quiet_NaN());
      new (&latitude)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(latitude_data__.data(), I);
      {
        std::vector<local_scalar_t__> latitude_flat__;
        current_statement__ = 66;
        latitude_flat__ = context__.vals_r("latitude");
        current_statement__ = 66;
        pos__ = 1;
        current_statement__ = 66;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 66;
          stan::model::assign(latitude, latitude_flat__[(pos__ - 1)],
            "assigning variable latitude", stan::model::index_uni(sym1__));
          current_statement__ = 66;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 67;
      stan::math::validate_non_negative_index("longitude", "I", I);
      current_statement__ = 68;
      context__.validate_dims("data initialization", "longitude", "double",
        std::vector<size_t>{static_cast<size_t>(I)});
      longitude_data__ = Eigen::Matrix<double,-1,1>::Constant(I,
                           std::numeric_limits<double>::quiet_NaN());
      new (&longitude)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(longitude_data__.data(), I);
      {
        std::vector<local_scalar_t__> longitude_flat__;
        current_statement__ = 68;
        longitude_flat__ = context__.vals_r("longitude");
        current_statement__ = 68;
        pos__ = 1;
        current_statement__ = 68;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 68;
          stan::model::assign(longitude, longitude_flat__[(pos__ - 1)],
            "assigning variable longitude", stan::model::index_uni(sym1__));
          current_statement__ = 68;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 69;
      stan::math::validate_non_negative_index("percent_conifer", "I", I);
      current_statement__ = 70;
      context__.validate_dims("data initialization", "percent_conifer",
        "double", std::vector<size_t>{static_cast<size_t>(I)});
      percent_conifer_data__ = Eigen::Matrix<double,-1,1>::Constant(I,
                                 std::numeric_limits<double>::quiet_NaN());
      new (&percent_conifer)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(percent_conifer_data__.data(),
        I);
      {
        std::vector<local_scalar_t__> percent_conifer_flat__;
        current_statement__ = 70;
        percent_conifer_flat__ = context__.vals_r("percent_conifer");
        current_statement__ = 70;
        pos__ = 1;
        current_statement__ = 70;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 70;
          stan::model::assign(percent_conifer, percent_conifer_flat__[(pos__
            - 1)], "assigning variable percent_conifer",
            stan::model::index_uni(sym1__));
          current_statement__ = 70;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 71;
      stan::math::validate_non_negative_index("percent_deciduous", "I", I);
      current_statement__ = 72;
      context__.validate_dims("data initialization", "percent_deciduous",
        "double", std::vector<size_t>{static_cast<size_t>(I)});
      percent_deciduous_data__ = Eigen::Matrix<double,-1,1>::Constant(I,
                                   std::numeric_limits<double>::quiet_NaN());
      new (&percent_deciduous)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(percent_deciduous_data__.data(),
        I);
      {
        std::vector<local_scalar_t__> percent_deciduous_flat__;
        current_statement__ = 72;
        percent_deciduous_flat__ = context__.vals_r("percent_deciduous");
        current_statement__ = 72;
        pos__ = 1;
        current_statement__ = 72;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 72;
          stan::model::assign(percent_deciduous,
            percent_deciduous_flat__[(pos__ - 1)],
            "assigning variable percent_deciduous",
            stan::model::index_uni(sym1__));
          current_statement__ = 72;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 73;
      stan::math::validate_non_negative_index("percent_pine", "I", I);
      current_statement__ = 74;
      context__.validate_dims("data initialization", "percent_pine",
        "double", std::vector<size_t>{static_cast<size_t>(I)});
      percent_pine_data__ = Eigen::Matrix<double,-1,1>::Constant(I,
                              std::numeric_limits<double>::quiet_NaN());
      new (&percent_pine)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(percent_pine_data__.data(), I);
      {
        std::vector<local_scalar_t__> percent_pine_flat__;
        current_statement__ = 74;
        percent_pine_flat__ = context__.vals_r("percent_pine");
        current_statement__ = 74;
        pos__ = 1;
        current_statement__ = 74;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 74;
          stan::model::assign(percent_pine, percent_pine_flat__[(pos__ - 1)],
            "assigning variable percent_pine", stan::model::index_uni(sym1__));
          current_statement__ = 74;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 75;
      stan::math::validate_non_negative_index("size", "I", I);
      current_statement__ = 76;
      context__.validate_dims("data initialization", "size", "double",
        std::vector<size_t>{static_cast<size_t>(I)});
      size_data__ = Eigen::Matrix<double,-1,1>::Constant(I,
                      std::numeric_limits<double>::quiet_NaN());
      new (&size) Eigen::Map<Eigen::Matrix<double,-1,1>>(size_data__.data(),
        I);
      {
        std::vector<local_scalar_t__> size_flat__;
        current_statement__ = 76;
        size_flat__ = context__.vals_r("size");
        current_statement__ = 76;
        pos__ = 1;
        current_statement__ = 76;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 76;
          stan::model::assign(size, size_flat__[(pos__ - 1)],
            "assigning variable size", stan::model::index_uni(sym1__));
          current_statement__ = 76;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 77;
      stan::math::validate_non_negative_index("age", "I", I);
      current_statement__ = 78;
      context__.validate_dims("data initialization", "age", "double",
        std::vector<size_t>{static_cast<size_t>(I)});
      age_data__ = Eigen::Matrix<double,-1,1>::Constant(I,
                     std::numeric_limits<double>::quiet_NaN());
      new (&age) Eigen::Map<Eigen::Matrix<double,-1,1>>(age_data__.data(), I);
      {
        std::vector<local_scalar_t__> age_flat__;
        current_statement__ = 78;
        age_flat__ = context__.vals_r("age");
        current_statement__ = 78;
        pos__ = 1;
        current_statement__ = 78;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 78;
          stan::model::assign(age, age_flat__[(pos__ - 1)],
            "assigning variable age", stan::model::index_uni(sym1__));
          current_statement__ = 78;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 79;
      stan::math::validate_non_negative_index("time_of_day", "I", I);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("time_of_day", "J", J);
      current_statement__ = 81;
      context__.validate_dims("data initialization", "time_of_day", "double",
        std::vector<size_t>{static_cast<size_t>(I), static_cast<size_t>(J)});
      time_of_day_data__ = Eigen::Matrix<double,-1,-1>::Constant(I, J,
                             std::numeric_limits<double>::quiet_NaN());
      new (&time_of_day)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(time_of_day_data__.data(), I,
        J);
      {
        std::vector<local_scalar_t__> time_of_day_flat__;
        current_statement__ = 81;
        time_of_day_flat__ = context__.vals_r("time_of_day");
        current_statement__ = 81;
        pos__ = 1;
        current_statement__ = 81;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 81;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 81;
            stan::model::assign(time_of_day, time_of_day_flat__[(pos__ - 1)],
              "assigning variable time_of_day",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 81;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 82;
      stan::math::validate_non_negative_index("Julian_date", "I", I);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("Julian_date", "J", J);
      current_statement__ = 84;
      context__.validate_dims("data initialization", "Julian_date", "double",
        std::vector<size_t>{static_cast<size_t>(I), static_cast<size_t>(J)});
      Julian_date_data__ = Eigen::Matrix<double,-1,-1>::Constant(I, J,
                             std::numeric_limits<double>::quiet_NaN());
      new (&Julian_date)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(Julian_date_data__.data(), I,
        J);
      {
        std::vector<local_scalar_t__> Julian_date_flat__;
        current_statement__ = 84;
        Julian_date_flat__ = context__.vals_r("Julian_date");
        current_statement__ = 84;
        pos__ = 1;
        current_statement__ = 84;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 84;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 84;
            stan::model::assign(Julian_date, Julian_date_flat__[(pos__ - 1)],
              "assigning variable Julian_date",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 84;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 85;
      stan::math::validate_non_negative_index("y", "I", I);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("y", "J", J);
      current_statement__ = 87;
      y = std::vector<std::vector<int>>(I,
            std::vector<int>(J, std::numeric_limits<int>::min()));
      current_statement__ = 92;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 90;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 88;
          stan::model::assign(y,
            stan::math::logical_gt(
              stan::model::rvalue(N, "N", stan::model::index_uni(i),
                stan::model::index_uni(j)), 0), "assigning variable y",
            stan::model::index_uni(i), stan::model::index_uni(j));
        }
      }
      current_statement__ = 87;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 87;
      stan::math::check_less_or_equal(function__, "y", y, 1);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("psi_est", "I", I);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("p_est", "I", I);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("p_est", "J", J);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("lambda_est", "I", I);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 +
      1;
  }
  inline std::string model_name() const final {
    return "abundance_cond_uccpuancy_TEST_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.1",
             "stancflags = "};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "abundance_cond_uccpuancy_TEST_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ beta_0 = DUMMY_VAR__;
      current_statement__ = 1;
      beta_0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_latitude = DUMMY_VAR__;
      current_statement__ = 2;
      beta_latitude = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_longitude = DUMMY_VAR__;
      current_statement__ = 3;
      beta_longitude = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_percent_conifer = DUMMY_VAR__;
      current_statement__ = 4;
      beta_percent_conifer = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_percent_deciduous = DUMMY_VAR__;
      current_statement__ = 5;
      beta_percent_deciduous = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_percent_pine = DUMMY_VAR__;
      current_statement__ = 6;
      beta_percent_pine = in__.template read<local_scalar_t__>();
      local_scalar_t__ alpha_0 = DUMMY_VAR__;
      current_statement__ = 7;
      alpha_0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ alpha_1 = DUMMY_VAR__;
      current_statement__ = 8;
      alpha_1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ alpha_2 = DUMMY_VAR__;
      current_statement__ = 9;
      alpha_2 = in__.template read<local_scalar_t__>();
      local_scalar_t__ gamma_0 = DUMMY_VAR__;
      current_statement__ = 10;
      gamma_0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ gamma_size = DUMMY_VAR__;
      current_statement__ = 11;
      gamma_size = in__.template read<local_scalar_t__>();
      local_scalar_t__ gamma_age = DUMMY_VAR__;
      current_statement__ = 12;
      gamma_age = in__.template read<local_scalar_t__>();
      local_scalar_t__ gamma_conifer_lambda = DUMMY_VAR__;
      current_statement__ = 13;
      gamma_conifer_lambda = in__.template read<local_scalar_t__>();
      local_scalar_t__ gamma_deciduous_lambda = DUMMY_VAR__;
      current_statement__ = 14;
      gamma_deciduous_lambda = in__.template read<local_scalar_t__>();
      local_scalar_t__ gamma_pine_lambda = DUMMY_VAR__;
      current_statement__ = 15;
      gamma_pine_lambda = in__.template read<local_scalar_t__>();
      {
        current_statement__ = 57;
        for (int i = 1; i <= I; ++i) {
          local_scalar_t__ lin_pred_occupancy = DUMMY_VAR__;
          current_statement__ = 29;
          lin_pred_occupancy = (((((beta_0 + (beta_latitude *
            stan::model::rvalue(latitude, "latitude",
              stan::model::index_uni(i))))
            + (beta_longitude *
            stan::model::rvalue(longitude, "longitude",
              stan::model::index_uni(i))))
            + (beta_percent_conifer *
            stan::model::rvalue(percent_conifer, "percent_conifer",
              stan::model::index_uni(i))))
            + (beta_percent_deciduous *
            stan::model::rvalue(percent_deciduous, "percent_deciduous",
              stan::model::index_uni(i))))
            + (beta_percent_pine *
            stan::model::rvalue(percent_pine, "percent_pine",
              stan::model::index_uni(i))));
          local_scalar_t__ psi_i = DUMMY_VAR__;
          current_statement__ = 30;
          psi_i = stan::math::inv_logit(lin_pred_occupancy);
          local_scalar_t__ lin_pred_lambda = DUMMY_VAR__;
          current_statement__ = 31;
          lin_pred_lambda = (((((gamma_0 + (gamma_size *
            stan::model::rvalue(size, "size", stan::model::index_uni(i)))) +
            (gamma_age *
            stan::model::rvalue(age, "age", stan::model::index_uni(i)))) +
            (gamma_conifer_lambda *
            stan::model::rvalue(percent_conifer, "percent_conifer",
              stan::model::index_uni(i))))
            + (gamma_deciduous_lambda *
            stan::model::rvalue(percent_deciduous, "percent_deciduous",
              stan::model::index_uni(i))))
            + (gamma_pine_lambda *
            stan::model::rvalue(percent_pine, "percent_pine",
              stan::model::index_uni(i))));
          local_scalar_t__ lambda_i = DUMMY_VAR__;
          current_statement__ = 32;
          lambda_i = stan::math::exp(lin_pred_lambda);
          current_statement__ = 33;
          lp_accum__.add(stan::math::log_mix(psi_i,
                           stan::math::poisson_lpmf<false>(
                             stan::model::rvalue(M, "M",
                               stan::model::index_uni(i)), lambda_i), 0));
          current_statement__ = 55;
          for (int j = 1; j <= J; ++j) {
            local_scalar_t__ lin_pred_detection = DUMMY_VAR__;
            current_statement__ = 34;
            lin_pred_detection = ((alpha_0 + (alpha_1 *
              stan::model::rvalue(time_of_day, "time_of_day",
                stan::model::index_uni(i), stan::model::index_uni(j))))
              + (alpha_2 *
              stan::model::rvalue(Julian_date, "Julian_date",
                stan::model::index_uni(i), stan::model::index_uni(j))));
            local_scalar_t__ p_ij = DUMMY_VAR__;
            current_statement__ = 35;
            p_ij = stan::math::exp(lin_pred_detection);
            local_scalar_t__ log_lik_0 = DUMMY_VAR__;
            current_statement__ = 36;
            log_lik_0 = stan::math::bernoulli_lpmf<false>(
                          stan::model::rvalue(y, "y",
                            stan::model::index_uni(i),
                            stan::model::index_uni(j)), 0);
            local_scalar_t__ log_lik_1 = DUMMY_VAR__;
            current_statement__ = 37;
            log_lik_1 = stan::math::bernoulli_lpmf<false>(
                          stan::model::rvalue(y, "y",
                            stan::model::index_uni(i),
                            stan::model::index_uni(j)), p_ij);
            current_statement__ = 38;
            lp_accum__.add(stan::math::log_sum_exp(log_lik_0, (log_lik_1 -
                             stan::math::log(psi_i))));
            current_statement__ = 39;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_0, 0, 5));
            current_statement__ = 40;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_latitude,
                             0, 5));
            current_statement__ = 41;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_longitude,
                             0, 5));
            current_statement__ = 42;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             beta_percent_conifer, 0, 5));
            current_statement__ = 43;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             beta_percent_deciduous, 0, 5));
            current_statement__ = 44;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             beta_percent_pine, 0, 5));
            current_statement__ = 45;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma_0, 0, 5));
            current_statement__ = 46;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma_size, 0, 5));
            current_statement__ = 47;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma_age, 0, 5));
            current_statement__ = 48;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_0, 0, 5));
            current_statement__ = 49;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_1, 0, 5));
            current_statement__ = 50;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_2, 0, 5));
            current_statement__ = 51;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             gamma_pine_lambda, 0, 5));
            current_statement__ = 52;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             gamma_conifer_lambda, 0, 5));
            current_statement__ = 53;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             gamma_deciduous_lambda, 0, 5));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "abundance_cond_uccpuancy_TEST_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double beta_0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      beta_0 = in__.template read<local_scalar_t__>();
      double beta_latitude = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      beta_latitude = in__.template read<local_scalar_t__>();
      double beta_longitude = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      beta_longitude = in__.template read<local_scalar_t__>();
      double beta_percent_conifer = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      beta_percent_conifer = in__.template read<local_scalar_t__>();
      double beta_percent_deciduous =
        std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      beta_percent_deciduous = in__.template read<local_scalar_t__>();
      double beta_percent_pine = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      beta_percent_pine = in__.template read<local_scalar_t__>();
      double alpha_0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      alpha_0 = in__.template read<local_scalar_t__>();
      double alpha_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      alpha_1 = in__.template read<local_scalar_t__>();
      double alpha_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      alpha_2 = in__.template read<local_scalar_t__>();
      double gamma_0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      gamma_0 = in__.template read<local_scalar_t__>();
      double gamma_size = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      gamma_size = in__.template read<local_scalar_t__>();
      double gamma_age = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 12;
      gamma_age = in__.template read<local_scalar_t__>();
      double gamma_conifer_lambda = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 13;
      gamma_conifer_lambda = in__.template read<local_scalar_t__>();
      double gamma_deciduous_lambda =
        std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 14;
      gamma_deciduous_lambda = in__.template read<local_scalar_t__>();
      double gamma_pine_lambda = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 15;
      gamma_pine_lambda = in__.template read<local_scalar_t__>();
      out__.write(beta_0);
      out__.write(beta_latitude);
      out__.write(beta_longitude);
      out__.write(beta_percent_conifer);
      out__.write(beta_percent_deciduous);
      out__.write(beta_percent_pine);
      out__.write(alpha_0);
      out__.write(alpha_1);
      out__.write(alpha_2);
      out__.write(gamma_0);
      out__.write(gamma_size);
      out__.write(gamma_age);
      out__.write(gamma_conifer_lambda);
      out__.write(gamma_deciduous_lambda);
      out__.write(gamma_pine_lambda);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> psi_est =
        Eigen::Matrix<double,-1,1>::Constant(I,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> p_est =
        Eigen::Matrix<double,-1,-1>::Constant(I, J,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> lambda_est =
        Eigen::Matrix<double,-1,1>::Constant(I,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 28;
      for (int i = 1; i <= I; ++i) {
        double lin_pred_occupancy = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 19;
        lin_pred_occupancy = (((((beta_0 + (beta_latitude *
          stan::model::rvalue(latitude, "latitude", stan::model::index_uni(i))))
          + (beta_longitude *
          stan::model::rvalue(longitude, "longitude",
            stan::model::index_uni(i))))
          + (beta_percent_conifer *
          stan::model::rvalue(percent_conifer, "percent_conifer",
            stan::model::index_uni(i))))
          + (beta_percent_deciduous *
          stan::model::rvalue(percent_deciduous, "percent_deciduous",
            stan::model::index_uni(i))))
          + (beta_percent_pine *
          stan::model::rvalue(percent_pine, "percent_pine",
            stan::model::index_uni(i))));
        current_statement__ = 20;
        stan::model::assign(psi_est,
          stan::math::inv_logit(lin_pred_occupancy),
          "assigning variable psi_est", stan::model::index_uni(i));
        double lin_pred_lambda = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 21;
        lin_pred_lambda = ((gamma_0 + (gamma_size *
          stan::model::rvalue(size, "size", stan::model::index_uni(i)))) +
          (gamma_age *
          stan::model::rvalue(age, "age", stan::model::index_uni(i))));
        current_statement__ = 22;
        stan::model::assign(lambda_est, stan::math::exp(lin_pred_lambda),
          "assigning variable lambda_est", stan::model::index_uni(i));
        current_statement__ = 26;
        for (int j = 1; j <= J; ++j) {
          double lin_pred_detection =
            std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 23;
          lin_pred_detection = ((alpha_0 + (alpha_1 *
            stan::model::rvalue(time_of_day, "time_of_day",
              stan::model::index_uni(i), stan::model::index_uni(j))))
            + (alpha_2 *
            stan::model::rvalue(Julian_date, "Julian_date",
              stan::model::index_uni(i), stan::model::index_uni(j))));
          current_statement__ = 24;
          stan::model::assign(p_est, stan::math::exp(lin_pred_detection),
            "assigning variable p_est", stan::model::index_uni(i),
            stan::model::index_uni(j));
        }
      }
      out__.write(psi_est);
      out__.write(p_est);
      out__.write(lambda_est);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ beta_0 = DUMMY_VAR__;
      current_statement__ = 1;
      beta_0 = in__.read<local_scalar_t__>();
      out__.write(beta_0);
      local_scalar_t__ beta_latitude = DUMMY_VAR__;
      current_statement__ = 2;
      beta_latitude = in__.read<local_scalar_t__>();
      out__.write(beta_latitude);
      local_scalar_t__ beta_longitude = DUMMY_VAR__;
      current_statement__ = 3;
      beta_longitude = in__.read<local_scalar_t__>();
      out__.write(beta_longitude);
      local_scalar_t__ beta_percent_conifer = DUMMY_VAR__;
      current_statement__ = 4;
      beta_percent_conifer = in__.read<local_scalar_t__>();
      out__.write(beta_percent_conifer);
      local_scalar_t__ beta_percent_deciduous = DUMMY_VAR__;
      current_statement__ = 5;
      beta_percent_deciduous = in__.read<local_scalar_t__>();
      out__.write(beta_percent_deciduous);
      local_scalar_t__ beta_percent_pine = DUMMY_VAR__;
      current_statement__ = 6;
      beta_percent_pine = in__.read<local_scalar_t__>();
      out__.write(beta_percent_pine);
      local_scalar_t__ alpha_0 = DUMMY_VAR__;
      current_statement__ = 7;
      alpha_0 = in__.read<local_scalar_t__>();
      out__.write(alpha_0);
      local_scalar_t__ alpha_1 = DUMMY_VAR__;
      current_statement__ = 8;
      alpha_1 = in__.read<local_scalar_t__>();
      out__.write(alpha_1);
      local_scalar_t__ alpha_2 = DUMMY_VAR__;
      current_statement__ = 9;
      alpha_2 = in__.read<local_scalar_t__>();
      out__.write(alpha_2);
      local_scalar_t__ gamma_0 = DUMMY_VAR__;
      current_statement__ = 10;
      gamma_0 = in__.read<local_scalar_t__>();
      out__.write(gamma_0);
      local_scalar_t__ gamma_size = DUMMY_VAR__;
      current_statement__ = 11;
      gamma_size = in__.read<local_scalar_t__>();
      out__.write(gamma_size);
      local_scalar_t__ gamma_age = DUMMY_VAR__;
      current_statement__ = 12;
      gamma_age = in__.read<local_scalar_t__>();
      out__.write(gamma_age);
      local_scalar_t__ gamma_conifer_lambda = DUMMY_VAR__;
      current_statement__ = 13;
      gamma_conifer_lambda = in__.read<local_scalar_t__>();
      out__.write(gamma_conifer_lambda);
      local_scalar_t__ gamma_deciduous_lambda = DUMMY_VAR__;
      current_statement__ = 14;
      gamma_deciduous_lambda = in__.read<local_scalar_t__>();
      out__.write(gamma_deciduous_lambda);
      local_scalar_t__ gamma_pine_lambda = DUMMY_VAR__;
      current_statement__ = 15;
      gamma_pine_lambda = in__.read<local_scalar_t__>();
      out__.write(gamma_pine_lambda);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta_0", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "beta_latitude",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "beta_longitude",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization",
        "beta_percent_conifer", "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization",
        "beta_percent_deciduous", "double", std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization",
        "beta_percent_pine", "double", std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "alpha_0",
        "double", std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "alpha_1",
        "double", std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "alpha_2",
        "double", std::vector<size_t>{});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "gamma_0",
        "double", std::vector<size_t>{});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "gamma_size",
        "double", std::vector<size_t>{});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "gamma_age",
        "double", std::vector<size_t>{});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization",
        "gamma_conifer_lambda", "double", std::vector<size_t>{});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization",
        "gamma_deciduous_lambda", "double", std::vector<size_t>{});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization",
        "gamma_pine_lambda", "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ beta_0 = DUMMY_VAR__;
      current_statement__ = 1;
      beta_0 = context__.vals_r("beta_0")[(1 - 1)];
      out__.write(beta_0);
      local_scalar_t__ beta_latitude = DUMMY_VAR__;
      current_statement__ = 2;
      beta_latitude = context__.vals_r("beta_latitude")[(1 - 1)];
      out__.write(beta_latitude);
      local_scalar_t__ beta_longitude = DUMMY_VAR__;
      current_statement__ = 3;
      beta_longitude = context__.vals_r("beta_longitude")[(1 - 1)];
      out__.write(beta_longitude);
      local_scalar_t__ beta_percent_conifer = DUMMY_VAR__;
      current_statement__ = 4;
      beta_percent_conifer = context__.vals_r("beta_percent_conifer")[(1 -
        1)];
      out__.write(beta_percent_conifer);
      local_scalar_t__ beta_percent_deciduous = DUMMY_VAR__;
      current_statement__ = 5;
      beta_percent_deciduous = context__.vals_r("beta_percent_deciduous")[(1
        - 1)];
      out__.write(beta_percent_deciduous);
      local_scalar_t__ beta_percent_pine = DUMMY_VAR__;
      current_statement__ = 6;
      beta_percent_pine = context__.vals_r("beta_percent_pine")[(1 - 1)];
      out__.write(beta_percent_pine);
      local_scalar_t__ alpha_0 = DUMMY_VAR__;
      current_statement__ = 7;
      alpha_0 = context__.vals_r("alpha_0")[(1 - 1)];
      out__.write(alpha_0);
      local_scalar_t__ alpha_1 = DUMMY_VAR__;
      current_statement__ = 8;
      alpha_1 = context__.vals_r("alpha_1")[(1 - 1)];
      out__.write(alpha_1);
      local_scalar_t__ alpha_2 = DUMMY_VAR__;
      current_statement__ = 9;
      alpha_2 = context__.vals_r("alpha_2")[(1 - 1)];
      out__.write(alpha_2);
      local_scalar_t__ gamma_0 = DUMMY_VAR__;
      current_statement__ = 10;
      gamma_0 = context__.vals_r("gamma_0")[(1 - 1)];
      out__.write(gamma_0);
      local_scalar_t__ gamma_size = DUMMY_VAR__;
      current_statement__ = 11;
      gamma_size = context__.vals_r("gamma_size")[(1 - 1)];
      out__.write(gamma_size);
      local_scalar_t__ gamma_age = DUMMY_VAR__;
      current_statement__ = 12;
      gamma_age = context__.vals_r("gamma_age")[(1 - 1)];
      out__.write(gamma_age);
      local_scalar_t__ gamma_conifer_lambda = DUMMY_VAR__;
      current_statement__ = 13;
      gamma_conifer_lambda = context__.vals_r("gamma_conifer_lambda")[(1 -
        1)];
      out__.write(gamma_conifer_lambda);
      local_scalar_t__ gamma_deciduous_lambda = DUMMY_VAR__;
      current_statement__ = 14;
      gamma_deciduous_lambda = context__.vals_r("gamma_deciduous_lambda")[(1
        - 1)];
      out__.write(gamma_deciduous_lambda);
      local_scalar_t__ gamma_pine_lambda = DUMMY_VAR__;
      current_statement__ = 15;
      gamma_pine_lambda = context__.vals_r("gamma_pine_lambda")[(1 - 1)];
      out__.write(gamma_pine_lambda);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta_0", "beta_latitude",
                "beta_longitude", "beta_percent_conifer",
                "beta_percent_deciduous", "beta_percent_pine", "alpha_0",
                "alpha_1", "alpha_2", "gamma_0", "gamma_size", "gamma_age",
                "gamma_conifer_lambda", "gamma_deciduous_lambda",
                "gamma_pine_lambda"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"psi_est", "p_est", "lambda_est"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(I)},
             std::vector<size_t>{static_cast<size_t>(I),
               static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(I)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "beta_0");
    param_names__.emplace_back(std::string() + "beta_latitude");
    param_names__.emplace_back(std::string() + "beta_longitude");
    param_names__.emplace_back(std::string() + "beta_percent_conifer");
    param_names__.emplace_back(std::string() + "beta_percent_deciduous");
    param_names__.emplace_back(std::string() + "beta_percent_pine");
    param_names__.emplace_back(std::string() + "alpha_0");
    param_names__.emplace_back(std::string() + "alpha_1");
    param_names__.emplace_back(std::string() + "alpha_2");
    param_names__.emplace_back(std::string() + "gamma_0");
    param_names__.emplace_back(std::string() + "gamma_size");
    param_names__.emplace_back(std::string() + "gamma_age");
    param_names__.emplace_back(std::string() + "gamma_conifer_lambda");
    param_names__.emplace_back(std::string() + "gamma_deciduous_lambda");
    param_names__.emplace_back(std::string() + "gamma_pine_lambda");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        param_names__.emplace_back(std::string() + "psi_est" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          param_names__.emplace_back(std::string() + "p_est" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda_est" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "beta_0");
    param_names__.emplace_back(std::string() + "beta_latitude");
    param_names__.emplace_back(std::string() + "beta_longitude");
    param_names__.emplace_back(std::string() + "beta_percent_conifer");
    param_names__.emplace_back(std::string() + "beta_percent_deciduous");
    param_names__.emplace_back(std::string() + "beta_percent_pine");
    param_names__.emplace_back(std::string() + "alpha_0");
    param_names__.emplace_back(std::string() + "alpha_1");
    param_names__.emplace_back(std::string() + "alpha_2");
    param_names__.emplace_back(std::string() + "gamma_0");
    param_names__.emplace_back(std::string() + "gamma_size");
    param_names__.emplace_back(std::string() + "gamma_age");
    param_names__.emplace_back(std::string() + "gamma_conifer_lambda");
    param_names__.emplace_back(std::string() + "gamma_deciduous_lambda");
    param_names__.emplace_back(std::string() + "gamma_pine_lambda");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        param_names__.emplace_back(std::string() + "psi_est" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          param_names__.emplace_back(std::string() + "p_est" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda_est" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_latitude\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_longitude\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_percent_conifer\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_percent_deciduous\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_percent_pine\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_size\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_conifer_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_deciduous_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_pine_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"psi_est\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"generated_quantities\"},{\"name\":\"p_est\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"generated_quantities\"},{\"name\":\"lambda_est\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_latitude\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_longitude\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_percent_conifer\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_percent_deciduous\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_percent_pine\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_size\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_conifer_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_deciduous_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_pine_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"psi_est\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"generated_quantities\"},{\"name\":\"p_est\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"generated_quantities\"},{\"name\":\"lambda_est\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1)
      + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (((I + (I *
      J)) + I));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1)
      + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (((I + (I *
      J)) + I));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = abundance_cond_uccpuancy_TEST_model_namespace::abundance_cond_uccpuancy_TEST_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return abundance_cond_uccpuancy_TEST_model_namespace::profiles__;
}
#endif