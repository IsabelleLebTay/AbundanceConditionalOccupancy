// Code generated by stanc v2.32.1
#include <stan/model/model_header.hpp>
namespace abundance_only_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 29> locations_array__ =
  {" (found before start of program)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 41, column 4 to column 33)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 42, column 4 to column 15)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 43, column 4 to column 18)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 44, column 4 to column 19)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 46, column 4 to column 23)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 70, column 4 to column 29)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 72, column 8 to column 113)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 71, column 19 to line 73, column 5)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 71, column 4 to line 73, column 5)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 50, column 4 to column 28)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 51, column 4 to column 29)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 53, column 4 to column 33)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 57, column 8 to column 113)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 63, column 8 to line 64, column 44)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 62, column 11 to line 65, column 9)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 59, column 12 to line 61, column 53)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 58, column 23 to line 62, column 5)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 58, column 8 to line 65, column 9)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 55, column 19 to line 66, column 5)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 55, column 4 to line 66, column 5)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 33, column 4 to column 19)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 34, column 10 to column 11)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 34, column 4 to column 28)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 35, column 11 to column 12)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 35, column 4 to column 18)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 36, column 11 to column 12)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 36, column 4 to column 19)",
  " (in 'C:/Users/ilebe/Documents/!Masters!/Analysis/AbundanceConditionalOccupancy/Model/abundance_only.stan', line 70, column 26 to column 27)"};
class abundance_only_model final : public model_base_crtp<abundance_only_model> {
 private:
  int I;
  std::vector<int> M;
  Eigen::Matrix<double,-1,1> age_data__;
  Eigen::Matrix<double,-1,1> size_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> age{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> size{nullptr, 0};
 public:
  ~abundance_only_model() {}
  abundance_only_model(stan::io::var_context& context__, unsigned int
                       random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "abundance_only_model_namespace::abundance_only_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 21;
      context__.validate_dims("data initialization", "I", "int",
        std::vector<size_t>{});
      I = std::numeric_limits<int>::min();
      current_statement__ = 21;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "I", I, 0);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("M", "I", I);
      current_statement__ = 23;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{static_cast<size_t>(I)});
      M = std::vector<int>(I, std::numeric_limits<int>::min());
      current_statement__ = 23;
      M = context__.vals_i("M");
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 24;
      stan::math::validate_non_negative_index("age", "I", I);
      current_statement__ = 25;
      context__.validate_dims("data initialization", "age", "double",
        std::vector<size_t>{static_cast<size_t>(I)});
      age_data__ = Eigen::Matrix<double,-1,1>::Constant(I,
                     std::numeric_limits<double>::quiet_NaN());
      new (&age) Eigen::Map<Eigen::Matrix<double,-1,1>>(age_data__.data(), I);
      {
        std::vector<local_scalar_t__> age_flat__;
        current_statement__ = 25;
        age_flat__ = context__.vals_r("age");
        current_statement__ = 25;
        pos__ = 1;
        current_statement__ = 25;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 25;
          stan::model::assign(age, age_flat__[(pos__ - 1)],
            "assigning variable age", stan::model::index_uni(sym1__));
          current_statement__ = 25;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 26;
      stan::math::validate_non_negative_index("size", "I", I);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "size", "double",
        std::vector<size_t>{static_cast<size_t>(I)});
      size_data__ = Eigen::Matrix<double,-1,1>::Constant(I,
                      std::numeric_limits<double>::quiet_NaN());
      new (&size) Eigen::Map<Eigen::Matrix<double,-1,1>>(size_data__.data(),
        I);
      {
        std::vector<local_scalar_t__> size_flat__;
        current_statement__ = 27;
        size_flat__ = context__.vals_r("size");
        current_statement__ = 27;
        pos__ = 1;
        current_statement__ = 27;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 27;
          stan::model::assign(size, size_flat__[(pos__ - 1)],
            "assigning variable size", stan::model::index_uni(sym1__));
          current_statement__ = 27;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 28;
      stan::math::validate_non_negative_index("predicted_counts", "I", I);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "abundance_only_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.1",
             "stancflags = "};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "abundance_only_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 1;
      theta = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(0, 1, lp__);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 2;
      alpha = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_age = DUMMY_VAR__;
      current_statement__ = 3;
      beta_age = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_size = DUMMY_VAR__;
      current_statement__ = 4;
      beta_size = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_age_size = DUMMY_VAR__;
      current_statement__ = 5;
      beta_age_size = in__.template read<local_scalar_t__>();
      {
        current_statement__ = 10;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_age, 0, 10));
        current_statement__ = 11;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_size, 0, 10));
        current_statement__ = 12;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_age_size, 0, 10));
        current_statement__ = 20;
        for (int i = 1; i <= I; ++i) {
          local_scalar_t__ lambda_i = DUMMY_VAR__;
          current_statement__ = 13;
          lambda_i = stan::math::exp((((alpha + (beta_age *
                       stan::model::rvalue(age, "age",
                         stan::model::index_uni(i)))) + (beta_size *
                       stan::model::rvalue(size, "size",
                         stan::model::index_uni(i)))) + ((beta_age_size *
                       stan::model::rvalue(age, "age",
                         stan::model::index_uni(i))) *
                       stan::model::rvalue(size, "size",
                         stan::model::index_uni(i)))));
          current_statement__ = 18;
          if (stan::math::logical_eq(
                stan::model::rvalue(M, "M", stan::model::index_uni(i)), 0)) {
            current_statement__ = 16;
            lp_accum__.add(stan::math::log_sum_exp(stan::math::log(theta),
                             (stan::math::log1m(theta) +
                             stan::math::poisson_lpmf<false>(
                               stan::model::rvalue(M, "M",
                                 stan::model::index_uni(i)), lambda_i))));
          } else {
            current_statement__ = 14;
            lp_accum__.add((stan::math::log1m(theta) +
              stan::math::poisson_lpmf<false>(
                stan::model::rvalue(M, "M", stan::model::index_uni(i)),
                lambda_i)));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "abundance_only_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double theta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      theta = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(0, 1, lp__);
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      alpha = in__.template read<local_scalar_t__>();
      double beta_age = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      beta_age = in__.template read<local_scalar_t__>();
      double beta_size = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      beta_size = in__.template read<local_scalar_t__>();
      double beta_age_size = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      beta_age_size = in__.template read<local_scalar_t__>();
      out__.write(theta);
      out__.write(alpha);
      out__.write(beta_age);
      out__.write(beta_size);
      out__.write(beta_age_size);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<double> predicted_counts =
        std::vector<double>(I, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 7;
        stan::model::assign(predicted_counts, (((alpha + (beta_age *
          stan::model::rvalue(age, "age", stan::model::index_uni(i)))) +
          (beta_size *
          stan::model::rvalue(size, "size", stan::model::index_uni(i)))) +
          ((beta_age_size *
          stan::model::rvalue(age, "age", stan::model::index_uni(i))) *
          stan::model::rvalue(size, "size", stan::model::index_uni(i)))),
          "assigning variable predicted_counts", stan::model::index_uni(i));
      }
      out__.write(predicted_counts);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 1;
      theta = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, theta);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 2;
      alpha = in__.read<local_scalar_t__>();
      out__.write(alpha);
      local_scalar_t__ beta_age = DUMMY_VAR__;
      current_statement__ = 3;
      beta_age = in__.read<local_scalar_t__>();
      out__.write(beta_age);
      local_scalar_t__ beta_size = DUMMY_VAR__;
      current_statement__ = 4;
      beta_size = in__.read<local_scalar_t__>();
      out__.write(beta_size);
      local_scalar_t__ beta_age_size = DUMMY_VAR__;
      current_statement__ = 5;
      beta_age_size = in__.read<local_scalar_t__>();
      out__.write(beta_age_size);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "theta", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "beta_age",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "beta_size",
        "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "beta_age_size",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 1;
      theta = context__.vals_r("theta")[(1 - 1)];
      out__.write_free_lub(0, 1, theta);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 2;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      out__.write(alpha);
      local_scalar_t__ beta_age = DUMMY_VAR__;
      current_statement__ = 3;
      beta_age = context__.vals_r("beta_age")[(1 - 1)];
      out__.write(beta_age);
      local_scalar_t__ beta_size = DUMMY_VAR__;
      current_statement__ = 4;
      beta_size = context__.vals_r("beta_size")[(1 - 1)];
      out__.write(beta_size);
      local_scalar_t__ beta_age_size = DUMMY_VAR__;
      current_statement__ = 5;
      beta_age_size = context__.vals_r("beta_age_size")[(1 - 1)];
      out__.write(beta_age_size);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"theta", "alpha", "beta_age",
                "beta_size", "beta_age_size"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"predicted_counts"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(I)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "theta");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "beta_age");
    param_names__.emplace_back(std::string() + "beta_size");
    param_names__.emplace_back(std::string() + "beta_age_size");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        param_names__.emplace_back(std::string() + "predicted_counts" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "theta");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "beta_age");
    param_names__.emplace_back(std::string() + "beta_size");
    param_names__.emplace_back(std::string() + "beta_age_size");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        param_names__.emplace_back(std::string() + "predicted_counts" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_size\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_age_size\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"predicted_counts\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_size\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_age_size\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"predicted_counts\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (I);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (I);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = abundance_only_model_namespace::abundance_only_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return abundance_only_model_namespace::profiles__;
}
#endif