---
title: "Poisson, Dispersion, and Spatial Autocorrelation?"
format:
  html:
    layout:
      width: '95%'
    code-fold: true
toc: true
toc-depth: 3
toc-expand: 2
code-copy: hover
project:
  type: website
  output-dir: docs
---

# Purpose

On this page, I will be testing overdispersion, checking residuals, and spatial autocorrelation for each of the 6 species. Previously, I checked whether adding a random effect for 'location' was useful, and that was axed for all the birds.

The flow is as such:

1.  Fit a Poisson model. We'll call it the 'null' model
2.  Plot the residuals of the null model
3.  Extract the residuals of the null model, and fit a gam to the residuals to see whether latitude and longitude can explain some variance
4.  Create an autocorrelation vector from the fitted gam
5.  Add the autocorrelation vector to the null model
6.  Plot the autocorrelation for the residuals of both null and spatial models
7.  Compare summaries for both models
8.  Check with a Chi Square whether the log-likelihoods of the two models are different

The decision to include or not the spatial autocorrelation vector depends on whether it explains variation in the spatial gam, whether it improves the spatial correlation of the residuals of the Poisson model, whether the estimates form the Poisson glm are unnecessarily altered, and whether one of the two models has a stronger log-likelihood.

The decision of including a spatial term should be considered in context to how this model will be used. Including the spatial term reduces generalisability, but it is required for some species. It will make predictions more difficult. But if the model is only used as a fitted empirical model, then the tradeoff is acceptable.

# Preparing for the models

Load packages and set paths.

```{r}
#| output: false
library(glmmTMB)
library(DHARMa)
library(ggplot2)
library(bbmle) 
library(nlme)
library(ncf)
library(dplyr)
library(mgcv)
library(usdm)
library(sjPlot)
library(unmarked)

covariates_path <- "C:/Users/ilebe/Documents/!Masters!/Analysis/0. Data/Processed/covariates"
obs_path <- "C:/Users/ilebe/Documents/!Masters!/Analysis/0. Data/Processed/All Processed Final Location"

```

Load data

```{r}
#| output: false
full_covariates <- read.csv(file.path(covariates_path, 'merged_covariates.csv'))
max_count <- read.csv(file.path(obs_path, 'max_count_all_spp 100m truncation.csv'))
multi_visit <- read.csv(file.path(obs_path, "multi_visit_count_all_spp 100m truncation.csv"))
```

Prepare data for modeling

```{r}
#| output: false
full_covariates$Veg_cat <- factor(full_covariates$Veg_cat)
# Add 'nb' to neighbourhood effect 
bird_columns <- c('TEWA', 'RCKI', 'WTSP', 'YRWA', 'REVI', 'OSFL')
new_names <- paste0("nb_", bird_columns)
colnames(full_covariates)[colnames(full_covariates) %in% bird_columns] <- new_names

obs_covs_df <- cbind(max_count, full_covariates)
head(obs_covs_df)
# write.csv(obs_covs_df, file = file.path(obs_path, "max_count_all_covs.csv"))
# Define the predictors to scale
predictors_to_scale <- c('RETN_m2', 'Year_since_logging')

# Apply MinMax scaling to each predictor
obs_covs_df[, predictors_to_scale] <- lapply(obs_covs_df[, predictors_to_scale], function(x) {
  (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
})

# summary(obs_covs_df)
obs_covs_df <- obs_covs_df[, !duplicated(colnames(obs_covs_df))]

```

# Modelling

## TEWA

There is some spatial correlation in the null model. Including a Random effect (1\|location) does not alleviate it or add much precision to the model.

Let's test it with the xy coefficient.

Conclusion: get rid of RE, add autoXY.

```{r}
# Format data for pcount()

multi_visit

# List of species
species <- c("TEWA", "RCKI", "WTSP", "YRWA", "REVI", "OSFL")

# Create a list to hold the species data frames
species_multiVisit <- list()

# Loop through each species and create a data frame
for(species_name in species) {
  species_multiVisit[[species_name]] <- multi_visit %>%
    select(location, visit_number, Day_of_Year, Time_of_Day, all_of(species_name))
}


# Assuming species_dfs is a list of species data frames
for(species_name in names(species_multiVisit)) {
  # Get the data for the species
  df <- species_multiVisit[[species_name]]
  
  # Prepare the count matrix (y)
  # Assuming 'location' is the site identifier and counts are in the last column
  y <- with(df, tapply(df[, ncol(df)], list(location, visit_number), sum))
  
  # Prepare site covariates (siteCovs), if any
  # Example: siteCovs <- unique(df[, c('site_covariate1', 'site_covariate2')])
  siteCovs <- unique(df[, c('site_covariate1', 'site_covariate2')])
  # Prepare observation covariates (obsCovs), if any
  # Example: obsCovs <- df[, c('obs_covariate1', 'obs_covariate2')]
  
  # Create unmarkedFramePCount object
  umf <- unmarkedFramePCount(y = y, siteCovs = siteCovs, obsCovs = obsCovs)
  
  # Store the unmarkedFramePCount object, e.g., in a list
  # species_umf[[species_name]] <- umf
}

View(species_multiVisit)
# Prepare site covariates (excluding species columns from site_covs)
site_covs <- obs_covs_df %>% select(-c(TEWA, RCKI, WTSP, YRWA, REVI, OSFL))

# Prepare observation covariates
obsCovs <- multi_visit %>% select(Day_of_Year, Time_of_Day)

# Create unmarkedFramePCount objects for each species
species_umf <- list()
for(species_name in species) {
  # Prepare the count matrix (y)
  y <- with(species_multiVisit[[species_name]], tapply(species_multiVisit[[species_name]][[species_name]], list(location, visit_number), sum))
  
  # Create unmarkedFramePCount object
  species_umf[[species_name]] <- unmarkedFramePCount(y = y, siteCovs = site_covs, obsCovs = obsCovs)
}

unmarkedFramePCount()

pcount(formula = "")
```

```{r}
# #| code-fold: false
PoissonTEWAbase <- glmmTMB(TEWA ~ percent_decid + percent_pine + 
                            percent_spruce +
                             RETN_m2 + Year_since_logging,
                    data = obs_covs_df,
                    family=poisson)

rePoissonTEWA <- glmmTMB(TEWA ~ percent_decid + percent_pine + 
                            percent_spruce +
                             RETN_m2 + Year_since_logging + (1|location),
                    data = obs_covs_df,
                    family=poisson)

plot(simulateResiduals(PoissonTEWAbase))
```

What about an interaction?

```{r}

PoissonTEWAbase <- glmmTMB(TEWA ~ percent_decid*RETN_m2 + percent_pine*RETN_m2 + 
                            percent_spruce*RETN_m2 +
                         Year_since_logging*RETN_m2,
                    data = obs_covs_df,
                    family=poisson)

PoissonTEWAinters <- glmmTMB(TEWA ~ Veg_cat + 
                         Year_since_logging:RETN_m2,
                    data = obs_covs_df,
                    family=poisson)
summary(PoissonTEWAinters)
plot_model(PoissonTEWAinters, type = "int")

TEWApgam <- gam(TEWA ~ s(Year_since_logging) + percent_decid + 
                percent_pine+ percent_spruce + RETN_m2,
                data = obs_covs_df, family = poisson)
plot(TEWApgam)
```


```{r}
plot(simulateResiduals(PoissonTEWAbase))
vcov(PoissonTEWAbase, full = TRUE)

median_percent_decid <- median(obs_covs_df$percent_decid, na.rm = TRUE)
median_percent_pine <- median(obs_covs_df$percent_pine, na.rm = TRUE)
median_percent_spruce <- median(obs_covs_df$percent_spruce, na.rm = TRUE)

specific_RETN_m2_values <- quantile(obs_covs_df$RETN_m2, probs = c(0, 0.25, 0.5, 0.75, 1))
specific_RETN_m2_values <- c(0, 0.25, 0.5, 0.75, 1)
# Modify new_data to include these variables
new_data <- expand.grid(
  Year_since_logging = seq(min(obs_covs_df$Year_since_logging), max(obs_covs_df$Year_since_logging), length.out = 100),
  RETN_m2 = specific_RETN_m2_values,
  percent_decid = median_percent_decid,
  percent_pine = median_percent_pine,
  percent_spruce = median_percent_spruce
)

# Now include the interaction and polynomial terms
# new_data$I_Year_since_logging_squared <- new_data$Year_since_logging^2


head(new_data)
# Predict TEWA values
new_data$predicted_TEWA <- predict(PoissonTEWAbase, newdata = new_data, type = "response")

# Plot TEWA vs. Year_since_logging for different RETN_m2 values
ggplot(new_data, aes(x = Year_since_logging, y = predicted_TEWA, color = factor(RETN_m2))) +
  geom_line() +
  labs(x = "Year since logging", y = "Predicted lambda (TEWA)", color = "RETN_m2 Value") +
  theme_minimal() +
  facet_wrap(~ factor(RETN_m2), scales = "free_y")



```

### Check for spatial correlation

R-sq.(adj) = 0.309 , lots of spatial correlation, which explains 30% of the variance in the residuals

```{r}
#| code-fold: false
par(mfrow=c(1,1))

resTEWA <- residuals(PoissonTEWAbase)
TEWAgam <- gam(resTEWA ~ s(longitude, latitude), data = obs_covs_df, family = gaussian)
plot(TEWAgam)
summary(TEWAgam)
autoXY <- fitted(TEWAgam) 
```

```{r}
xyPoissonTEWA <- glmmTMB(TEWA ~ percent_decid + percent_pine + 
                            percent_spruce +
                             RETN_m2 + Year_since_logging + autoXY,
                    data = obs_covs_df,
                    family=poisson)

rexyPoissonTEWA <- glmmTMB(TEWA ~ percent_decid + percent_pine + 
                            percent_spruce +
                             RETN_m2 + Year_since_logging + autoXY +
                             + (1|location),
                    data = obs_covs_df,
                    family=poisson)
```

There looks to be some spatial autocorrelation. This GAM checks whether a smoothing function of latitude and longitude can explain the variation in the residuals from the Poisson GLM. The R\^2 = 0.3, and with p \< 0.001.

```{r}
#| echo: true
#| include: false

E <- residuals(PoissonTEWAbase)
corr <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, E, resamp = 99, type = "boot")

Ere <- residuals(rePoissonTEWA)
corrRE <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Ere, resamp = 99, type = "boot")

Exy <- residuals(xyPoissonTEWA)
corrxy <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Exy, resamp = 99, type = "boot")

Erexy <- residuals(rexyPoissonTEWA)
corrRExy <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Erexy, resamp = 99, type = "boot")

```

```{r}
par(mfrow=c(1,4))
plot(corr, main='TEWA base model')
plot(corrRE, main='TEWA RE model')
plot(corrxy, main='TEWA spatial model')
plot(corrRExy, main='TEWA spatial RE model')
```

```{r}
#| code-fold: false
#| include: false
summary(PoissonTEWAbase)
summary(rePoissonTEWA)
summary(xyPoissonTEWA)
summary(rexyPoissonTEWA)
```

Adding the spatial autocorrelation term and random effect does not alter the significant or direction of the other parameters, but some of the effect sizes change quite a bit.

```{r}
AIC(PoissonTEWAbase) # AIC = 608
AIC(rePoissonTEWA) # AIC = 602
AIC(xyPoissonTEWA) # AIC = 498
AIC(rexyPoissonTEWA) # AIC = 500
```

## Summary: TEWA

| Model                    | Distribution Normal | Disperson Normal | Spatial correlation | AIC | Terms (related to base) |
|--------------------------|:--------------------|:-----------------|:--------------------|:----|:------------------------|
| Base                     | Yes                 |    Yes           |       Severe        | 608 |                         |
| Random effect            | Yes                 |    Yes           |       Severe        | 602 |                         |
| Spatial correlation      | Quantile patterns   |    Yes           |       Mild          | 498 |                         |
| Spatial correlation + re | Quantile patterns   |    No            |       Mild          | 500 |                         |

Adding a spatial factor solves some issues, and has the best AIC, but introduces some issues.

### Check if the spatial model is a different and a better fit than the base model

```{r}
#| code-fold: false
anova(PoissonTEWAbase, xyPoissonTEWA)
```

The models are significantly different.

## OSFL

Conclusions:

-   No overdispersion

-   Weak spatial autocorrelation

-   Adding a spatial autocorrelation term affects the relevence of the RENT size term

-   The spatial model performs better

-   Not sure if adding the spatial autocorrelation term is a good idea

```{r}
#| code-fold: false
PoissonOSFLbase <- glmmTMB(OSFL ~ percent_decid + percent_pine + 
                            percent_spruce +
                            RETN_m2 + Year_since_logging,
                    data = obs_covs_df,
                    family=poisson)

rePoissonOSFL <- glmmTMB(OSFL ~ percent_mixed + percent_pine + 
                            percent_spruce +
                            RETN_m2 + Year_since_logging  + (1|location),
                    data = obs_covs_df,
                    family=poisson)

plot(simulateResiduals(PoissonOSFLbase))

```

```{r}
OSFLinters <- glmmTMB(OSFL ~ Veg_cat*RETN_m2 + 
                         Year_since_logging*RETN_m2,
                    data = obs_covs_df,
                    family=poisson)
summary(PoissonOSFLbase)

OSFLpgam <- gam(OSFL ~ s(Year_since_logging) + percent_decid + 
                percent_pine+ percent_spruce + RETN_m2,
                data = obs_covs_df, family = poisson)
summary(OSFLpgam)
plot(OSFLpgam)
```

### Check for spatial correlation

```{r}
#| code-fold: false
par(mfrow=c(1,1))
resOSFL <- residuals(PoissonOSFLbase)
OSFLgam <- gam(resOSFL ~ s(longitude, latitude), data = obs_covs_df, family = gaussian)
plot(OSFLgam)
summary(OSFLgam)
autoXY <- fitted(OSFLgam) 
```


```{r}
xyPoissonOSFL <- glmmTMB(OSFL ~ percent_decid + percent_pine + 
                            percent_spruce +
                             RETN_m2 + Year_since_logging + autoXY,
                    data = obs_covs_df,
                    family=poisson)

rexyPoissonOSFL <- glmmTMB(OSFL ~ percent_decid + percent_pine + 
                            percent_spruce +
                             RETN_m2 + Year_since_logging + autoXY +
                             + (1|location),
                    data = obs_covs_df,
                    family=poisson)

plot(simulateResiduals(xyPoissonOSFL))                    
```

```{r}
#| include: false
 
E <- residuals(PoissonOSFLbase)
corr <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, E, resamp = 99, type = "boot")

Ere <- residuals(rePoissonOSFL)
corrRE <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Ere, resamp = 99, type = "boot")

Exy <- residuals(xyPoissonOSFL)
corrxy <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Exy, resamp = 99, type = "boot")

Erexy <- residuals(rexyPoissonOSFL)
corrRExy <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Erexy, resamp = 99, type = "boot")
```


```{r}
#| echo: true
par(mfrow=c(1,4))
plot(corr, main='OSFL base model')
plot(corrRE, main='OSFL RE model')
plot(corrxy, main='OSFL spatial model')
plot(corrRExy, main='OSFL spatial RE model')
```

```{r}
#| code-fold: false
#| include: false
summary(PoissonOSFLbase) 
summary(rePoissonOSFL)
summary(xyPoissonOSFL)
summary(rexyPoissonOSFL)
```

```{r}
#| code-fold: false
AIC(PoissonOSFLbase) #100
AIC(rePoissonOSFL) #88
AIC(xyPoissonOSFL) #92
AIC(rexyPoissonOSFL) #87
```


## Summary: OSFL

| Model                    | Distribution Normal | Disperson Normal | Spatial correlation | AIC | Terms (related to base) |
|--------------------------|:--------------------|:-----------------|:--------------------|:----|:------------------------|
| Base                     | Yes                 |    Yes           |       Negligeable   | 100 |                         |
| Random effect            | Yes                 |    No, mild      |       Mild        | 88 |                         |
| Spatial correlation      | Yes                 |    Yes           |       None          | 92 |                         |
| Spatial correlation + re | Yes                 |    No, mild      |       Negligeable  | 87 |                         |


### Check if the 2 top models are different

```{r}
#| code-fold: false
anova(PoissonOSFLbase, rePoissonOSFL)
```

The model with a random effect is a better fit, and spatial correlation is not necessary.

## YRWA

Conclusion: do not add spatial correlation for the YRWA. The original model correlation wraps around 0, the autocorrelation factore form the GAM is not significant, and the addition of the correlation factor in the model does not produce significant diffenreces between the two models.

```{r}
#| code-fold: false
PoissonYRWAbase <- glmmTMB(YRWA ~ percent_decid + percent_pine + 
                            percent_spruce +
                            RETN_m2 + Year_since_logging,
                    data = obs_covs_df,
                    family=poisson)

rePoissonYRWA <- glmmTMB(YRWA ~ percent_decid + percent_pine + 
                            percent_spruce +
                            RETN_m2 + Year_since_logging + (1|location),
                    data = obs_covs_df,
                    family=poisson)


plot(simulateResiduals(PoissonYRWAbase))  
```

### Check for spatial correlation

```{r}
#| code-fold: false
par(mfrow=c(1,1))

resYRWA <- residuals(PoissonYRWAbase)
YRWAgam <- gam(resYRWA ~ s(longitude, latitude), data = obs_covs_df, family = gaussian)
plot(YRWAgam)
summary(YRWAgam)
autoXY <- fitted(YRWAgam)
```

```{r}
xyPoissonYRWA <- glmmTMB(YRWA ~ percent_decid + percent_pine + 
                            percent_spruce +
                             RETN_m2 + Year_since_logging + autoXY,
                    data = obs_covs_df,
                    family=poisson)

rexyPoissonYRWA <- glmmTMB(YRWA ~ percent_decid + percent_pine + 
                            percent_spruce +
                             RETN_m2 + Year_since_logging + autoXY +
                             + (1|location),
                    data = obs_covs_df,
                    family=poisson)

plot(simulateResiduals(xyPoissonYRWA))                      
```


```{r}
#| echo: true
#| include: false 

E <- residuals(PoissonYRWAbase)
corr <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, E, resamp = 99, type = "boot")

Ere <- residuals(rePoissonYRWA)
corrRE <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Ere, resamp = 99, type = "boot")

Exy <- residuals(xyPoissonYRWA)
corrxy <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Exy, resamp = 99, type = "boot")

Erexy <- residuals(rexyPoissonYRWA)
corrRExy <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Erexy, resamp = 99, type = "boot")
```

```{r}
par(mfrow=c(1,4))
plot(corr, main='YRWA base model')
plot(corrRE, main='YRWA RE model')
plot(corrxy, main='YRWA spatial model')
plot(corrRExy, main='YRWA spatial RE model')
```

All models wrap around 0, which is not unexpected.

```{r}
#| code-fold: false
#| include: false
summary(PoissonYRWAbase)
summary(rePoissonYRWA)
summary(xyPoissonYRWA)
summary(rexyPoissonYRWA)
```

```{r}
AIC(PoissonYRWAbase)
AIC(rePoissonYRWA)
AIC(xyPoissonYRWA)
AIC(rexyPoissonYRWA)
```

| Model                    | Distribution Normal | Disperson Normal | Spatial correlation | AIC | Terms (related to base) |
|--------------------------|:--------------------|:-----------------|:--------------------|:----|:------------------------|
| Base                     | Mild patterns       |    Yes           |       Negligeable   | 378 |                         |
| Random effect            |       Yes           |    Yes           |       Negligeable   | 380 |                         |
| Spatial correlation      | Yes                 |    Yes           |       None          | 350 |    RETN & Age sig    |
| Spatial correlation + re | Yes                 |    Yes           |       None          | 352 |    RETN & Age sig      |

The spatial correlation predictor recudes correlation, teases out the effects of age and pathc size, and has the lowest AIC.

### Check if the spatial model is a different and a better fit than the regular model

```{r}
#| code-fold: false
anova(xyPoissonYRWA, rePoissonYRWA)
```

Although the spatial model performs better, there is also evidence against choosing that model. Adding or omitting the spatial term should've have a large impact. The random effect and spatial correlation are not different from and ANOVA test, but the AIC is better for the spatial model.

## REVI

Conclusion:

-   Smooth spline from the GAM significant, R\^2 = 0.225
-   Including the autiXY factor in the Poisson does not reduce meaning from other covariates
-   Spatial autocorrelation plot better
-   Chi square indicates the models are different, the AIC with the autoXY is better.
-   Include the autoXY factor

```{r}
#| code-fold: false
PoissonREVIbase <- glmmTMB(REVI ~  percent_pine + 
                            percent_spruce + percent_mixed +
                            RETN_m2 + Year_since_logging,
                    data = obs_covs_df,
                    family=poisson)

rePoissonREVI <- glmmTMB(REVI ~  percent_pine + 
                            percent_spruce + percent_mixed +
                            RETN_m2 + Year_since_logging + (1|location),
                    data = obs_covs_df,
                    family=poisson)                    

plot(simulateResiduals(PoissonREVIbase))
```

There is a bit of minor overdispersion.

### Check for spatial correlation

```{r}
#| code-fold: false
par(mfrow=c(1,1))

resREVI <- residuals(PoissonREVIbase)
REVIgam <- gam(resREVI ~ s(longitude, latitude), data = obs_covs_df, family = gaussian)
plot(REVIgam)
summary(REVIgam)
autoXY <- fitted(REVIgam) 
```

There is some spatial correlation.

```{r}
xyPoissonREVI <- glmmTMB(REVI ~ percent_decid + percent_pine + 
                            percent_spruce +
                             RETN_m2 + Year_since_logging + autoXY,
                    data = obs_covs_df,
                    family=poisson)

rexyPoissonREVI <- glmmTMB(REVI ~ percent_decid + percent_pine + 
                            percent_spruce +
                             RETN_m2 + Year_since_logging + autoXY +
                             + (1|location),
                    data = obs_covs_df,
                    family=poisson)

plot(simulateResiduals(xyPoissonREVI))                      
```

```{r}
#| echo: true
#| include: false

E <- residuals(PoissonREVIbase)
corr <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, E, resamp = 99, type = "boot")

Exy <- residuals(xyPoissonREVI)
corrxy <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Exy, resamp = 99, type = "boot")

Ere <- residuals(rePoissonREVI)
corrRE <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Ere, resamp = 99, type = "boot")

Erexy <- residuals(rexyPoissonREVI)
corrRExy <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Erexy, resamp = 99, type = "boot")
```

```{r}
par(mfrow=c(1,4))
plot(corr, main='REVI base model')
plot(corrRE, main='REVI RE model')
plot(corrxy, main='REVI spatial model')
plot(corrRExy, main='REVI spatial RE model')
```

The spatial model fixes the correlation issue.

```{r}
#| code-fold: false
#| include: false
summary(PoissonREVIbase)
summary(rePoissonREVI)
summary(xyPoissonREVI)
summary(rexyPoissonREVI)
```

```{r}
AIC(PoissonREVIbase)
AIC(rePoissonREVI)
AIC(xyPoissonREVI)
AIC(rexyPoissonREVI)
```

| Model                    | Distribution Normal | Disperson Normal | Spatial correlation | AIC | Terms (related to base) |
|--------------------------|:--------------------|:-----------------|:--------------------|:----|:------------------------|
| Base                     | Yes                 |    Yes           |       Mild         | 382 |    Spr & Pine       |
| Random effect            |   Spatial patterns  |    Yes           |       Mild         | 378 |    Spr            |
| Spatial correlation      | Yes                 |    Yes           |    Negligeable     | 321 |    Spr & xy   |
| Spatial correlation + re | Yes                 |    Yes           |      Negligeable   | 323 |    Spr & xy      |

Base model is normally distributed and dispersed with mild spatial correlation. Adding  random effect for location introduces some issues. Including a spatial effect reduces the correlation, but saps some of the effect from pine. How to choose?

### Check if the spatial model is a different and a better fit than the regular model

```{r}
#| code-fold: false
anova(xyPoissonREVI, PoissonREVIbase)
```


## WTSP

Conclusion

-   Spatial correlation in original model, form the correlation graph
-   Spatial correlation gam: R\^2 = 0.206, highly significant
-   Adding the autoXY alters the habitat estimators, but not the treatments
-   Correlation plot much better
-   Chi square: models very diffenret, autoXY better log-lik
-   Conclusion: add the autoXY

```{r}
#| code-fold: false
PoissonWTSPbase <- glmmTMB(WTSP ~ percent_decid + percent_pine + 
                            percent_spruce +
                            RETN_m2 + Year_since_logging,
                    data = obs_covs_df,
                    family=poisson)

rePoissonWTSP <- glmmTMB(WTSP ~ percent_decid + percent_pine + 
                            percent_spruce +
                            RETN_m2 + Year_since_logging + (1|location),
                    data = obs_covs_df,
                    family=poisson)

plot(simulateResiduals(PoissonWTSPbase))
```

### Check for spatial correlation

```{r}
#| code-fold: false
par(mfrow=c(1,1))

resWTSP <- residuals(PoissonWTSPbase)
WTSPgam <- gam(resWTSP ~ s(longitude, latitude), data = obs_covs_df, family = gaussian)
plot(WTSPgam)
summary(WTSPgam)
autoXY <- fitted(WTSPgam) 
```

There are some spatial patterns.

```{r}
xyPoissonWTSP <- glmmTMB(WTSP ~ percent_decid + percent_pine + 
                            percent_spruce +
                             RETN_m2 + Year_since_logging + autoXY,
                    data = obs_covs_df,
                    family=poisson)

rexyPoissonWTSP <- glmmTMB(WTSP ~ percent_decid + percent_pine + 
                            percent_spruce +
                             RETN_m2 + Year_since_logging + autoXY +
                             + (1|location),
                    data = obs_covs_df,
                    family=poisson)

plot(simulateResiduals(xyPoissonWTSP))                      
```


```{r}
#| echo: true
#| include: false

E <- residuals(PoissonWTSPbase)
corr <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, E, resamp = 99, type = "boot")

Ere <- residuals(rePoissonWTSP)
corrRE <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Ere, resamp = 99, type = "boot")

Exy <- residuals(xyPoissonWTSP)
corrxy <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Exy, resamp = 99, type = "boot")

Erexy <- residuals(rexyPoissonWTSP)
corrRExy <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Erexy, resamp = 99, type = "boot")
```

```{r}
par(mfrow=c(1,4))
plot(corr, main='WTSP base model')  
plot(corrRE, main='WTSP RE model')   
plot(corrxy, main='WTSP spatial model')    
plot(corrRExy, main='WTSP spatial RE model') 
```

```{r}
#| code-fold: false
#| include: false
summary(PoissonWTSPbase)
summary(rePoissonWTSP)
summary(xyPoissonWTSP)
summary(rexyPoissonWTSP)
```


```{r}
#| code-fold: false
AIC(PoissonWTSPbase)
AIC(rePoissonWTSP)
AIC(xyPoissonWTSP)
AIC(rexyPoissonWTSP)
```

| Model                    | Distribution Normal | Disperson Normal | Spatial correlation | AIC | Terms (related to base) |
|--------------------------|:--------------------|:-----------------|:--------------------|:----|:------------------------|
| Base                     | Quantile patterns |    Yes           |       Mild         | 830 |    Spr & Age       |
| Random effect            |  Yes           |    Yes           |       Mild         | 832 |    Spr & Age      |
| Spatial correlation      | Yes                 |    Yes           |    Negligeable     | 766 |    Spr, Age & xy   |
| Spatial correlation + re | Quantile patterns     |    Yes           |      Negligeable   | 768 |  Spr, Age & xy      |

The model with the spatial effect is normally distributed and dispersed, fixed spatial correlation, unchanged terms effect and lowest AIC.

### Check if the spatial model is a different and a better fit than the regular model

```{r}
#| code-fold: false
anova(rePoissonWTSP, xyPoissonWTSP)
```

## RCKI

Conclusion:

-   Not much spatial correlation to start with
-   GAM significant, but R\^2 very small
-   issues with convergence

```{r}
#| code-fold: false
par(mfrow=c(1,1))
PoissonRCKIbase <- glmmTMB(RCKI ~ percent_decid + percent_pine + 
                            percent_spruce +
                            RETN_m2 + Year_since_logging,
                    data = obs_covs_df,
                    family=poisson)

rePoissonRCKI <- glmmTMB(RCKI ~ percent_decid + percent_pine + 
                            percent_spruce +
                            RETN_m2 + Year_since_logging + (1|location),
                    data = obs_covs_df,
                    family=poisson)

# summary(rePoissonRCKI)
# plot(simulateResiduals(PoissonRCKIbase))
```

There are some convergence issues.

### Check for spatial correlation

```{r}
#| code-fold: false
par(mfrow=c(1,1))

resRCKI <- residuals(PoissonRCKIbase)
RCKIgam <- gam(resRCKI ~ s(longitude, latitude), data = obs_covs_df, family = gaussian)
plot(RCKIgam)
summary(RCKIgam)
autoXY <- fitted(RCKIgam) 
```

Weak spatial correlation.

```{r}
xyPoissonRCKI <- glmmTMB(RCKI ~ percent_decid + percent_pine + 
                            percent_spruce +
                             RETN_m2 + Year_since_logging + autoXY,
                    data = obs_covs_df,
                    family=poisson)

rexyPoissonRCKI <- glmmTMB(RCKI ~ percent_decid + percent_pine + 
                            percent_spruce +
                             RETN_m2 + Year_since_logging + autoXY +
                             + (1|location),
                    data = obs_covs_df,
                    family=poisson)

# plot(simulateResiduals(rexyPoissonRCKI))                      
```

```{r}
#| echo: true
#| include: false

E <- residuals(PoissonRCKIbase)
corr <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, E, resamp = 99, type = "boot")

Ere <- residuals(rePoissonRCKI)
corrRE <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Ere, resamp = 99, type = "boot")


Exy <- residuals(xyPoissonRCKI)
corrxy <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Exy, resamp = 99, type = "boot")

Erexy <- residuals(rexyPoissonRCKI)
corrRExy <- spline.correlog(obs_covs_df$longitude, obs_covs_df$latitude, Erexy, resamp = 99, type = "boot")
```

```{r}
par(mfrow=c(1,4))
plot(corr, main='RCKI base model')
plot(corrRE, main='RCKI RE model')  
plot(corrxy, main='RCKI spatial model')
plot(corrRExy, main='RCKI spatial RE model') 
```

The null model is already pretty good. Unsure whether adding the spatial correlation facotr is necessary.

```{r}
#| code-fold: false
#| include: false
summary(PoissonRCKIbase)
summary(rePoissonRCKI)
summary(xyPoissonRCKI)
summary(rexyPoissonRCKI)
```

```{r}
#| code-fold: false
#| include: false
AIC(PoissonRCKIbase)
AIC(rePoissonRCKI)
AIC(xyPoissonRCKI)
AIC(rexyPoissonRCKI)
```

Adding the spatial factor nullifies the effect of year since logging. We will have to explore a bit more why that could be.

| Model                    | Distribution Normal | Disperson Normal | Spatial correlation | AIC | Terms (related to base) |
|--------------------------|:--------------------|:-----------------|:--------------------|:----|:------------------------|
| Base                     | Yes                 |    Yes           |       None         | NA |    NA       |
| Random effect            |  Quantile patterns   |    Yes           |       None         | NA |    NA      |
| Spatial correlation      | Yes                 |    Yes           |    None     | NA |     NA |
| Spatial correlation + re | Quantile patterns     |    Yes           |      None   | NA |  NA      |


### Check if the spatial model is a different and a better fit than the regular model

```{r}
#| code-fold: false
#| include: false
# anova(xyPoissonRCKI, PoissonRCKIbase)
```